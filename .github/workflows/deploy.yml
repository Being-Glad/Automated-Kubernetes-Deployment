name: CI/CD â€“ Build, Scan, Deploy to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  CLUSTER_NAME: hello-eks
  ECR_REPO: 630398150656.dkr.ecr.ap-south-1.amazonaws.com/hello-eks

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::630398150656:role/hello-eks-gha-role

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push (tagged with SHA and latest)
        env:
          IMAGE_SHA: ${{ env.ECR_REPO }}:${{ github.sha }}
          IMAGE_LATEST: ${{ env.ECR_REPO }}:latest
        run: |
          set -euo pipefail
          # --- Detect Dockerfile location (subfolder support) ---
          DF=""
          CTX=""
          if [ -f ./app/Dockerfile ]; then
            DF=./app/Dockerfile
            CTX=./app
          elif [ -f ./Dockerfile ]; then
            DF=./Dockerfile
            CTX=.
          else
            DF=$(find . -maxdepth 3 -name Dockerfile | head -n1 || true)
            if [ -z "$DF" ]; then
              echo "ERROR: Dockerfile not found in repo (searched to depth 3)."
              exit 1
            fi
            CTX=$(dirname "$DF")
          fi
          echo "Using Dockerfile: $DF"
          echo "Build context:   $CTX"
          docker build -f "$DF" -t "$IMAGE_SHA" -t "$IMAGE_LATEST" "$CTX"
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"

      - name: Trivy scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.ECR_REPO }}:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Install Kustomize (curl)
        run: |
          set -euo pipefail
          VER="v5.4.3"
          url="https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${VER}/kustomize_${VER#v}_linux_amd64.tar.gz"
          echo "Downloading $url"
          curl -sSL "$url" -o /tmp/kustomize.tgz
          sudo tar -C /usr/local/bin -xzf /tmp/kustomize.tgz kustomize
          kustomize version

      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      - name: Set image in kustomize (prod)
        working-directory: k8s/overlays/prod
        env:
          IMAGE_SHA: ${{ env.ECR_REPO }}:${{ github.sha }}
        run: |
          echo "Setting image to: $IMAGE_SHA"
          kustomize edit set image app="$IMAGE_SHA"
          kustomize build . | tee /tmp/manifest.yaml

      - name: Apply to cluster (prod overlay)
        run: kubectl apply -k k8s/overlays/prod

      - name: Confirm image on cluster
        run: |
          IMG=$(kubectl -n hello get deploy hello-web -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "Deployment image: $IMG"

      - name: Wait for rollout (5 minutes)
        run: kubectl -n hello rollout status deploy/hello-web --timeout=300s

      - name: Diagnostics on failure
        if: failure()
        run: |
          echo "--- DEPLOYMENT ---"
          kubectl -n hello get deploy hello-web -o wide || true
          kubectl -n hello describe deploy hello-web || true
          echo "--- REPLICASETS ---"
          kubectl -n hello get rs -l app=hello-web -o wide || true
          echo "--- PODS ---"
          kubectl -n hello get pods -l app=hello-web -o wide || true
          POD=$(kubectl -n hello get pods -l app=hello-web -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$POD" ]; then
            echo "--- DESCRIBE POD $POD ---"
            kubectl -n hello describe pod "$POD" | sed -n '1,200p' || true
            echo "--- LOGS (last 200 lines) ---"
            kubectl -n hello logs "$POD" --all-containers --tail=200 || true
          fi
          echo "--- EVENTS ---"
          kubectl -n hello get events --sort-by=.lastTimestamp | tail -n 50 || true
