name: CI-CD
on:
  push:
    branches: ["main"]

permissions:
  id-token: write   # for OIDC
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to ECR
        id: ecrlogin
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          aws ecr get-login-password | docker login --username AWS --password-stdin "$REGISTRY"

      - name: Compute image URI
        id: img
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names hello-eks --query 'repositories[0].repositoryUri' --output text)
          echo "REPO_URI=$REPO_URI" >> $GITHUB_OUTPUT
          echo "IMAGE_URI=${REPO_URI}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ steps.img.outputs.IMAGE_URI }}
            ${{ steps.img.outputs.REPO_URI }}:latest
          cache-from: type=registry,ref=${{ steps.img.outputs.REPO_URI }}:buildcache
          cache-to: type=registry,ref=${{ steps.img.outputs.REPO_URI }}:buildcache,mode=max

      - name: Trivy scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.img.outputs.IMAGE_URI }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name hello-eks --region $AWS_REGION

      - name: Apply Kustomize overlay with new image
        working-directory: k8s/overlays/prod
        run: |
          kustomize edit set image <IMAGE_REPOSITORY>=${{ steps.img.outputs.IMAGE_URI }}
          kustomize build | kubectl apply -f -

      - name: Wait for rollout
        run: kubectl -n hello rollout status deploy/hello-web --timeout=180s

      - name: Get Service external hostname
        run: kubectl -n hello get svc hello-web -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
